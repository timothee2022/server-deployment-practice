{"version":3,"sources":["../src/seq.js"],"names":["fullNodeFabric","makeNodeFabric","nodeReduce","fn","initVal","initAcc","acc","val","value","next","seqSymbol","Symbol","pipe","list","seq","Array","isArray","Seq","pipeSeq","back","apply","emptySeq","ln","length","nodeMakers","map","lastNode","reduce","backNode","reduceRight","fullFabric","prepend","data","subseq","nodeMaker","append"],"mappings":"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","file":"seq.js","sourcesContent":["//@flow\n\nimport {\n  type NextValue,\n  type FullNode,\n} from './index.h'\nimport { fullNodeFabric, makeNodeFabric } from './nodes'\n\nexport function nodeReduce(fn: (acc: any, val: any) => any, initVal?: NextValue, initAcc: any) {\n  let acc = initAcc\n  let val = initVal\n  while (val) {\n    acc = fn(acc, val.value)\n    val = val.next\n  }\n  return acc\n}\n\nconst seqSymbol = Symbol('seq')\n\nexport function pipe(list: Array<((x: any) => any)> | FullNode) {\n  const seq = Array.isArray(list)\n    ? Seq(list)\n    : list\n  function pipeSeq(initAcc: any) {\n    const back = seq.back\n    return back\n      ? nodeReduce(apply, back, initAcc)\n      : initAcc\n  }\n  //$off\n  pipeSeq[seqSymbol] = seq\n  return pipeSeq\n}\n\nexport function emptySeq(): FullNode {\n  return fullNodeFabric(makeNodeFabric()())()\n}\n\n//$off\nconst apply = (acc, val) => val(acc)\n\nexport function Seq(list: any[]): FullNode {\n  const ln = list.length\n  if (ln === 0) return emptySeq()\n  const nodeMakers = list.map(makeNodeFabric)\n  //$off\n  const lastNode: NextValue = nodeMakers.reduce(apply, void 0)\n  //$off\n  const backNode: NextValue = nodeMakers.reduceRight(apply, void 0)\n  const fullFabric = fullNodeFabric(lastNode)\n  return fullFabric(backNode)\n}\n\nexport function prepend(data: any, seq: FullNode): FullNode {\n  let subseq: FullNode = seq\n  //$off\n  if (seq[seqSymbol]) subseq = seq[seqSymbol]\n  const nodeMaker = makeNodeFabric(data)\n  let backNode, lastNode\n  backNode: {\n    let acc = void 0\n    let val = subseq\n    while (val) {\n      acc = makeNodeFabric(val.value)(acc)\n      val = val.next\n    }\n    acc = nodeMaker(acc)\n    backNode = acc\n  }\n  lastNode: {\n    let acc = nodeMaker()\n    let val = subseq.back\n    while (val) {\n      acc = makeNodeFabric(val.value)(acc)\n      val = val.next\n    }\n    lastNode = acc\n  }\n  const fullFabric = fullNodeFabric(lastNode)\n  return fullFabric(backNode)\n}\n\nexport function append(data: any, seq: FullNode): FullNode {\n  let subseq: FullNode = seq\n  //$off\n  if (seq[seqSymbol]) subseq = seq[seqSymbol]\n  const nodeMaker = makeNodeFabric(data)\n  let backNode, lastNode\n  backNode: {\n    let acc = nodeMaker()\n    let val = subseq\n    while (val) {\n      acc = makeNodeFabric(val.value)(acc)\n      val = val.next\n    }\n    backNode = acc\n  }\n  lastNode: {\n    let acc = void 0\n    let val = subseq.back\n    while (val) {\n      acc = makeNodeFabric(val.value)(acc)\n      val = val.next\n    }\n    acc = nodeMaker(acc)\n    lastNode = acc\n  }\n  const fullFabric = fullNodeFabric(lastNode)\n  return fullFabric(backNode)\n}\n"]}