'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nodeReduce = nodeReduce;
exports.pipe = pipe;
exports.emptySeq = emptySeq;
exports.Seq = Seq;
exports.prepend = prepend;
exports.append = append;

require('./index.h');

var _nodes = require('./nodes');

function nodeReduce(fn, initVal, initAcc) {
  var acc = initAcc;
  var val = initVal;
  while (val) {
    acc = fn(acc, val.value);
    val = val.next;
  }
  return acc;
}

var seqSymbol = Symbol('seq');

function pipe(list) {
  var seq = Array.isArray(list) ? Seq(list) : list;
  function pipeSeq(initAcc) {
    var back = seq.back;
    return back ? nodeReduce(apply, back, initAcc) : initAcc;
  }
  //$off
  pipeSeq[seqSymbol] = seq;
  return pipeSeq;
}

function emptySeq() {
  return (0, _nodes.fullNodeFabric)((0, _nodes.makeNodeFabric)()())();
}

//$off
var apply = (acc, val) => val(acc);

function Seq(list) {
  var ln = list.length;
  if (ln === 0) return emptySeq();
  var nodeMakers = list.map(_nodes.makeNodeFabric);
  //$off
  var lastNode = nodeMakers.reduce(apply, void 0);
  //$off
  var backNode = nodeMakers.reduceRight(apply, void 0);
  var fullFabric = (0, _nodes.fullNodeFabric)(lastNode);
  return fullFabric(backNode);
}

function prepend(data, seq) {
  var subseq = seq;
  //$off
  if (seq[seqSymbol]) subseq = seq[seqSymbol];
  var nodeMaker = (0, _nodes.makeNodeFabric)(data);
  var backNode = void 0,
      lastNode = void 0;
  backNode: {
    var acc = void 0;
    var val = subseq;
    while (val) {
      acc = (0, _nodes.makeNodeFabric)(val.value)(acc);
      val = val.next;
    }
    acc = nodeMaker(acc);
    backNode = acc;
  }
  lastNode: {
    var _acc = nodeMaker();
    var _val = subseq.back;
    while (_val) {
      _acc = (0, _nodes.makeNodeFabric)(_val.value)(_acc);
      _val = _val.next;
    }
    lastNode = _acc;
  }
  var fullFabric = (0, _nodes.fullNodeFabric)(lastNode);
  return fullFabric(backNode);
}

function append(data, seq) {
  var subseq = seq;
  //$off
  if (seq[seqSymbol]) subseq = seq[seqSymbol];
  var nodeMaker = (0, _nodes.makeNodeFabric)(data);
  var backNode = void 0,
      lastNode = void 0;
  backNode: {
    var acc = nodeMaker();
    var val = subseq;
    while (val) {
      acc = (0, _nodes.makeNodeFabric)(val.value)(acc);
      val = val.next;
    }
    backNode = acc;
  }
  lastNode: {
    var _acc2 = void 0;
    var _val2 = subseq.back;
    while (_val2) {
      _acc2 = (0, _nodes.makeNodeFabric)(_val2.value)(_acc2);
      _val2 = _val2.next;
    }
    _acc2 = nodeMaker(_acc2);
    lastNode = _acc2;
  }
  var fullFabric = (0, _nodes.fullNodeFabric)(lastNode);
  return fullFabric(backNode);
}
//# sourceMappingURL=seq.js.map