{"version":3,"sources":["../src/seq.js"],"names":["nodeReduce","pipe","emptySeq","Seq","prepend","append","fn","initVal","initAcc","acc","val","value","next","seqSymbol","Symbol","list","seq","Array","isArray","pipeSeq","back","apply","ln","length","nodeMakers","map","lastNode","reduce","backNode","reduceRight","fullFabric","data","subseq","nodeMaker"],"mappings":"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","file":"seq.js","sourcesContent":["//@flow\n\nimport {\n  type NextValue,\n  type FullNode,\n} from './index.h'\nimport { fullNodeFabric, makeNodeFabric } from './nodes'\n\nexport function nodeReduce(fn: (acc: any, val: any) => any, initVal?: NextValue, initAcc: any) {\n  let acc = initAcc\n  let val = initVal\n  while (val) {\n    acc = fn(acc, val.value)\n    val = val.next\n  }\n  return acc\n}\n\nconst seqSymbol = Symbol('seq')\n\nexport function pipe(list: Array<((x: any) => any)> | FullNode) {\n  const seq = Array.isArray(list)\n    ? Seq(list)\n    : list\n  function pipeSeq(initAcc: any) {\n    const back = seq.back\n    return back\n      ? nodeReduce(apply, back, initAcc)\n      : initAcc\n  }\n  //$off\n  pipeSeq[seqSymbol] = seq\n  return pipeSeq\n}\n\nexport function emptySeq(): FullNode {\n  return fullNodeFabric(makeNodeFabric()())()\n}\n\n//$off\nconst apply = (acc, val) => val(acc)\n\nexport function Seq(list: any[]): FullNode {\n  const ln = list.length\n  if (ln === 0) return emptySeq()\n  const nodeMakers = list.map(makeNodeFabric)\n  //$off\n  const lastNode: NextValue = nodeMakers.reduce(apply, void 0)\n  //$off\n  const backNode: NextValue = nodeMakers.reduceRight(apply, void 0)\n  const fullFabric = fullNodeFabric(lastNode)\n  return fullFabric(backNode)\n}\n\nexport function prepend(data: any, seq: FullNode): FullNode {\n  let subseq: FullNode = seq\n  //$off\n  if (seq[seqSymbol]) subseq = seq[seqSymbol]\n  const nodeMaker = makeNodeFabric(data)\n  let backNode, lastNode\n  backNode: {\n    let acc = void 0\n    let val = subseq\n    while (val) {\n      acc = makeNodeFabric(val.value)(acc)\n      val = val.next\n    }\n    acc = nodeMaker(acc)\n    backNode = acc\n  }\n  lastNode: {\n    let acc = nodeMaker()\n    let val = subseq.back\n    while (val) {\n      acc = makeNodeFabric(val.value)(acc)\n      val = val.next\n    }\n    lastNode = acc\n  }\n  const fullFabric = fullNodeFabric(lastNode)\n  return fullFabric(backNode)\n}\n\nexport function append(data: any, seq: FullNode): FullNode {\n  let subseq: FullNode = seq\n  //$off\n  if (seq[seqSymbol]) subseq = seq[seqSymbol]\n  const nodeMaker = makeNodeFabric(data)\n  let backNode, lastNode\n  backNode: {\n    let acc = nodeMaker()\n    let val = subseq\n    while (val) {\n      acc = makeNodeFabric(val.value)(acc)\n      val = val.next\n    }\n    backNode = acc\n  }\n  lastNode: {\n    let acc = void 0\n    let val = subseq.back\n    while (val) {\n      acc = makeNodeFabric(val.value)(acc)\n      val = val.next\n    }\n    acc = nodeMaker(acc)\n    lastNode = acc\n  }\n  const fullFabric = fullNodeFabric(lastNode)\n  return fullFabric(backNode)\n}\n"]}