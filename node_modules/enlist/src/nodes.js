//@flow

import {
  type NextValue,
  type FullNode,
  type NextFabric,
  type FullNodeFabric,
} from './index.h'

// function Instance(value: any) {
//   this.value = value
// }

// export function valueFabric(value: any): Value {
//   return new Instance(value)
// }

// export function nodeFabric(data: Value): NextFabric {
//   /*:: const { value } = data */
//   function NodeInstance(next?: NextValue) {
//     this.next = next
//     /*:: this.value = value */
//   }
//   NodeInstance.prototype = data
//   return (nextVal?: NextValue) => new NodeInstance(nextVal)
// }

interface NodeI {
  next?: NextValue,
  value: any,
}

class SolidNode implements NodeI {
  next: *
  value: any
  constructor(next?: NextValue, value: any) {
    this.next = next
    this.value = value
  }
}

export const makeNodeFabric = (e: any): NextFabric =>
  (nextVal?: NextValue) => new SolidNode(nextVal, e)

export function fullNodeFabric(instance: NextValue): FullNodeFabric {
  /*::
  const { next, value } = instance
  */
  function FullNodeInstance(back?: NextValue) {
    this.back = back
    /*::
    this.next = next
    this.value = value
    */
  }
  FullNodeInstance.prototype = instance
  return (back?: NextValue): FullNode => new FullNodeInstance(back)
}
