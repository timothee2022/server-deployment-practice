//@flow

import {
  type NextValue,
  type FullNode,
} from './index.h'
import { fullNodeFabric, makeNodeFabric } from './nodes'

export function nodeReduce(fn: (acc: any, val: any) => any, initVal?: NextValue, initAcc: any) {
  let acc = initAcc
  let val = initVal
  while (val) {
    acc = fn(acc, val.value)
    val = val.next
  }
  return acc
}

const seqSymbol = Symbol('seq')

export function pipe(list: Array<((x: any) => any)> | FullNode) {
  const seq = Array.isArray(list)
    ? Seq(list)
    : list
  function pipeSeq(initAcc: any) {
    const back = seq.back
    return back
      ? nodeReduce(apply, back, initAcc)
      : initAcc
  }
  //$off
  pipeSeq[seqSymbol] = seq
  return pipeSeq
}

export function emptySeq(): FullNode {
  return fullNodeFabric(makeNodeFabric()())()
}

//$off
const apply = (acc, val) => val(acc)

export function Seq(list: any[]): FullNode {
  const ln = list.length
  if (ln === 0) return emptySeq()
  const nodeMakers = list.map(makeNodeFabric)
  //$off
  const lastNode: NextValue = nodeMakers.reduce(apply, void 0)
  //$off
  const backNode: NextValue = nodeMakers.reduceRight(apply, void 0)
  const fullFabric = fullNodeFabric(lastNode)
  return fullFabric(backNode)
}

export function prepend(data: any, seq: FullNode): FullNode {
  let subseq: FullNode = seq
  //$off
  if (seq[seqSymbol]) subseq = seq[seqSymbol]
  const nodeMaker = makeNodeFabric(data)
  let backNode, lastNode
  backNode: {
    let acc = void 0
    let val = subseq
    while (val) {
      acc = makeNodeFabric(val.value)(acc)
      val = val.next
    }
    acc = nodeMaker(acc)
    backNode = acc
  }
  lastNode: {
    let acc = nodeMaker()
    let val = subseq.back
    while (val) {
      acc = makeNodeFabric(val.value)(acc)
      val = val.next
    }
    lastNode = acc
  }
  const fullFabric = fullNodeFabric(lastNode)
  return fullFabric(backNode)
}

export function append(data: any, seq: FullNode): FullNode {
  let subseq: FullNode = seq
  //$off
  if (seq[seqSymbol]) subseq = seq[seqSymbol]
  const nodeMaker = makeNodeFabric(data)
  let backNode, lastNode
  backNode: {
    let acc = nodeMaker()
    let val = subseq
    while (val) {
      acc = makeNodeFabric(val.value)(acc)
      val = val.next
    }
    backNode = acc
  }
  lastNode: {
    let acc = void 0
    let val = subseq.back
    while (val) {
      acc = makeNodeFabric(val.value)(acc)
      val = val.next
    }
    acc = nodeMaker(acc)
    lastNode = acc
  }
  const fullFabric = fullNodeFabric(lastNode)
  return fullFabric(backNode)
}
